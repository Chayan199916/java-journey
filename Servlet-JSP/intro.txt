* client -> server -> web container (which stores all servlets( special type of java class file)) ->
web.xml -> servlet-mapping -> service method;

* inside service method either doGet or doPost is called depending on the method that has been used at client side;
default one is doGet;

* going from one servlet to another servlet (dispatching req from one servlet to another servlet);

there are two ways : RequestDispatcher (here client or browser doesn't know who exactly sending response as same req and res objects being used) and Redirect (two diff (req,res) pairs are used. to send data session management is used);

* sending data from one servlet to another servlet;

we use session management
we can also use req object to send data;

* life cycle of a servlet:
init -> service -> destroy

* RequestDispatcher vs sendRedirect

https://stackoverflow.com/questions/2047122/requestdispatcher-forward-vs-httpservletresponse-sendredirect

* Cookie management : 
when for the first time client sends a req, server sends cookie with response object. next time when client sends another request, it sends the cookie again to make server remember that it had a connection before. so server accepts cookie and gets to remember client. It;s also possible that client having multiple cookies.

* ServletContext

used to store database location, file-path, username and password for logging in database etc. It's an object which will be shared between all the servlets.

* ServletConfig

If we want diff config for diff servlets then go for ServletConfig

*ServletAnnotation Config
Deployment descriptor or web.xml gives the mapping between url and servlet
we can avoid xml handling and instead of xml, we can use annotation.

* jsp

tomcat is called servlet container. all jsp codes are converted to servlets. 
there are 4 tags in jsp : 
<% %> : scriptlet (all these codes go inside service method)
<%= %> : expression (if we want to print something directly without using out.println())
<%! %> : declaration (these codes go outside service method. var declaration, method etc)
<%@ %> : directive (importing package ex: [<%@page import = "package name" %>])

so if intention is to design a page, jsp is better but if intention is to process then servlet.

* directives

@page
@include
@taglib